# Deploys new build in live
name: Generate release notes

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Enter release tag number'
        required: true
      release_type:
        description: 'Enter release type (patch, minor, or major)'
      passcode:
        description: 'Enter passcode'
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  ChangeLogAlpha:
    runs-on: ubuntu-latest
    strategy:
      # setting this flag so even if one job fails, others will continue
      fail-fast: false
    outputs:
      release_tag: ${{ steps.release_tag_step.outputs.number }}
      version: ${{ steps.parse_json_step.outputs.version_number }}
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE with selected branch, so your job can access it
      # - uses: actions/checkout@v2
      #   with:
      #     ref: master
      - id: parse_json_step
        uses: actions/github-script@v3.1.0
        with:
          github-token: '12345'
          script: |
            const fs = require('fs');
            try {
              const raw = fs.readFileSync('./package.json', 'utf8')
              const json = JSON.parse(raw)
              core.setOutput('version_number', json.version);
            } catch (e) {
              core.setOutput('version_number', '9.1.1');
            }


      - id: release_tag_step
        run: |
          if [[ ${{ steps.parse_json_step.outputs.version_number }} != ${{github.event.inputs.release_tag}} ]]; then
            echo 'Proceeding with user selected release tag';
            echo "##[set-output name=number;]$(echo ${{github.event.inputs.release_tag}})"
            exit 1
          else 
            echo 'Generating release notes and bumping version';
            git config --global user.email "noreply@remo.co"
            git config --global user.name "Release Notes"
            if [[ -z ${{github.event.inputs.release_type}} ]]; then
              echo "No release type entered"
            elif [[ ${{github.event.inputs.release_type}}  == 'patch' ]]; then
              npx standard-version --no-verify --release-as patch
            elif [[ ${{github.event.inputs.release_type}}  == 'minor' ]]; then
              npx standard-version --no-verify --release-as minor
            elif [[ ${{github.event.inputs.release_type}}  == 'major' ]]; then
              npx standard-version --no-verify --release-as major
            else
              echo "Incorrect or empty release type. Received: ${{github.event.inputs.release_type}}"
            fi
            git push --follow-tags origin master
            bumped_release_tag=$(grep -m 1 -E "version" package.json | cut -c 15- | rev | cut -c 3- | rev)
            echo "::set-output name=number::$bumped_release_tag"
          fi
      - name: Log output
        run: |
          echo "Logging prev step output"
          echo "The selected release_tag is ${{ steps.release_tag_step.outputs.version_number }}"
  DeployLive:
    runs-on: ubuntu-latest
    needs: ChangeLogAlpha
    steps:
    - run: echo ${{needs.ChangeLogAlpha.outputs.release_tag}}
